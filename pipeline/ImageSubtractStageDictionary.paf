#<?cfg paf policy ?>
# Default Image Subtraction Policy File

####################################
# Write intermediate FITS files? (boolean)
#
debugIO: false
debugPlot: false



####################################
# ASTROMETRICALLY WARPING THE TEMPLATE IMAGE TO MATCH THE SCIENCE IMAGE
#
######
# Warping kernel for warping template Exposure
#
# Options are : bilinear, lanczos#
#
warpingKernelName: "lanczos4"



####################################
# RUNNING DETECTION TO FIND GOOD FOOTPRINTS
#
######
# Minimum number of pixels in an acceptible Footprint
#
fpNpixMin: 5

######
# Maximum number of pixels in an acceptible Footprint
#
# Too big and the subsequent convolutions become unwieldy 
#
fpNpixMax: 500

######
# Grow footprint by this many units of the Kernel size
#
# Note : this number should be no smaller than 1.5.  Otherwise there
# are too few pixels to accurately constrain the background and the
# Kernel sum.  A value of 2.0 is slightly conservative in that the
# quality of the Kernels should be better / more stable, but will take
# about twice as long to calcuate.  If you look at the plot of Kernel
# sum vs. this variable, kSum does not converge until at least 1.5.
#
fpGrowKsize: 2.0

######
# Threshold in Sigma or Signal detection?
#
# Allowed values : value, stdev, variance
#
detThresholdType: "stdev"

######
# Threshold 
#
# Initial detection threshold (if high, this is for debugging)
#
# For standard processing a value like 10 would be acceptable
# 
detThreshold: 250.0

######
# Minimum number of clean candidates in the image
#
minCleanFp: 30

######
# How do you change the detection threshold if minCleanFp
# not found
#
detThresholdScaling: 0.5

######
# How low can you go
#
detThresholdMin: 10.0



####################################
# BASIS SET FOR KERNEL FITTING
#
######
# Type of basis set for PSF matching kernel
# Options are : delta-function, alard-lupton
#
kernelBasisSet: "delta-function"

######
# Size of the convolution kernel
#
# For delta function kernels there are kernelRows.x.kernelCols bases
# For alard lupton kernel, the half width is kernelRows//2, kernelCols//2
#
kernelRows: 19
kernelCols: 19

######
# Default Alard-Lupton Parameters
# 
# Note that the widths are in sigma, not FWHM
# len(alardSigGauss) and len(alardDegGauss) must equal alardNGauss
#
alardNGauss:   3
alardSigGauss: 0.7 1.5 3.0
alardDegGauss: 4   3   2

# Lets just make a couple for debugging
#alardNGauss: 1
#alardSigGauss: 1.5
#alardDegGauss: 1


######
# Regularization used with delta-function kernel basis set to enfore
# smoothness and self-similarity
#
# order      : Which derivative you expect to be smooth (e.g. for order=0, first derivative is penalized)
# boundary   : 0 = unwrapped, 1 = wrapped, 2 = order-tapered ('order' is highest used) 
# difference : 0 = forward, 1 = central
# scaling    : Fraction of the default lambda calculation (N.R. 18.5.8) to use; strength of regularization
#
useRegularization: true
regularizationOrder: 2
regularizationBoundary: 1
regularizationDifference: 0
regularizationScaling: 0.001



####################################
# KERNEL QUALITY CONTROL
#
######
# Rejects objects with deviant Kernel Sums
#
#
maxKsumIterations: 5
maxKsumSigma: 3.0

######
# Rejects objects with bad difference image quality
#
# This is used as a proxy for the quality of the kernel.  We look at
# both the mean value of the residuals in the difference image
# (normalized by the noise; expectation value is 0.0) as well as the
# width of the distribution (expectation value 1.0)
#
# Maximum diffim average of (residual/noise) for an acceptable Kernel
#
candidateResidualMeanMax: 0.5

######
# Maximum diffim standard deviation of (residual/noise) for an acceptable Kernel
#
candidateResidualStdMax: 1.5



####################################
# SINGLE KERNEL FITTING AROUND 1 SOURCE
#
######
# Remake single kernel using better variance estimate after first pass?
#
# Primarily useful when convolving a single-depth template image,
# otherwise not necessary
#
iterateSingleKernel: false

######
# Use constant variance weighting in single kernel fitting?  
#
# In some cases this is better for bright star residuals
#
constantVarianceWeighting: false

######
# Calculate kernel and background uncertainties for each object?
#
# Comes from inverse of the covariance matrix
# NOTE: Regularization can cause this step problems
#
calculateKernelUncertainty: false



####################################
# SPATIAL KERNEL FITTING
#
######
# Order of kernel and background spatial variation
#
spatialKernelOrder: 1
spatialBgOrder: 0

######
# Do we subtract off the differential background outside of ip_diffim?
# 
#backgroundPolicy: {
#    # how to interpolate the background values
#    algorithm:  "NATURAL_SPLINE" 
#    # how large regions of the sky should be used for each background point
#    binsize:    128
#}

#####
# Chops up the image into cells of sizeCellX x sizeCellY pixels
#
# Used to initialize afwMath::SpatialCellSet class 
#
sizeCellX: 256
sizeCellY: 256

######
# Number of stars to use in each SpatialCell cell
#
nStarPerCell: 1

######
# Number of iterations to reject bad footprints in the spatial fitting
#
maxSpatialIterations: 1

######
# Do we use PCA to reduce the dimensionality of the basis sets?
#
# This is particularly useful for delta-function kernels;
# functionally, all the Cells have their raw kernels determined, we
# run a PCA on these Kernels, and then re-fit the Cells using the
# eigenKernels which are then fit for spatially using the same
# technique as for the non-PCA delta-function and Alard-Lupton kernels
# 
usePcaForSpatialKernel: false

######
# How many 
#
numPrincipalComponents: 5

######
# How many (min)
#
minPrincipalComponents: 1

######
# How many (max)
#
maxPrincipalComponents: 3

######
# At what fraction of the eigenvalues do you cut off the expansion?
#
fracEigenVal : 0.95
