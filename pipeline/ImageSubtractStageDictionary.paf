#<?cfg paf policy ?>
# Default Image Subtraction Policy File

####################################
# Write intermediate FITS files? (boolean)
#
debugIO: false
debugPlot: false



####################################
# ASTROMETRICALLY WARPING THE TEMPLATE IMAGE TO MATCH THE SCIENCE IMAGE
#
######
# Warping kernel for warping template Exposure
#
# Options are : bilinear, lanczos#
#
warpingKernelName: "lanczos4"



####################################
# RUNNING DETECTION TO FIND GOOD FOOTPRINTS
#
######
# Minimum number of pixels in an acceptible Footprint
#
fpNpixMin: 5

######
# Maximum number of pixels in an acceptible Footprint
#
# Too big and the subsequent convolutions become unwieldy 
#
fpNpixMax: 500

######
# Grow each raw detection footprint by this many pixels
#
# The smaller the faster; however the kernel sum does not converge if
# the stamp is too small; and the kernel is not constrained at all if
# the stamp is the size of the kernel.  Rule of thumb is at least 1.5
# times the kernel size
#
# The grown stamp is ~2*fpGrowPix pixels larger in each dimension.
#
fpGrowPix: 30

######
# Threshold in Sigma or Signal detection?
#
# Allowed values : value, stdev, variance
#
detThresholdType: "stdev"

######
# Threshold 
#
# Initial detection threshold (if high, this is for debugging)
#
# For standard processing a value like 10 would be acceptable
# 
detThreshold: 10.


####################################
# BASIS SET FOR KERNEL FITTING
#
######
# Type of basis set for PSF matching kernel
#
# Options are : delta-function, alard-lupton
#
# If alard-lupton is used, the first term will have no spatial
# variation and the kernel sum will be conserved.  If delta-function
# is used, you have the option to "useRegularization", and might also
# want to seriously consider "usePcaForSpatialKernel" which will also
# enable kernel sum conservation for the delta function kernels.
#
# NOTE : if "alard-lupton" you likely want to turn off
# "usePcaForSpatialKernel" down below.  And almost certainly
# "useRegularization" = false
#
kernelBasisSet: "delta-function"

######
# Size of the convolution kernel
#
# For delta function kernels there are kernelRows.x.kernelCols bases
# For alard lupton kernel, the half width is kernelRows//2, kernelCols//2
#
kernelRows: 19
kernelCols: 19

######
# Default Alard-Lupton Parameters
# 
# Note that the widths are in sigma, not FWHM (FWHM = 2.355 sigma)
# len(alardSigGauss) and len(alardDegGauss) must equal alardNGauss
#
alardNGauss:   3
alardSigGauss: 0.7 1.5 3.0
alardDegGauss: 4   3   2

# Lets just make a couple for debugging
#alardNGauss: 1
#alardSigGauss: 1.5
#alardDegGauss: 1

######
# FUTURE : Scaling of these numbers with the Psf Fwhm
#
fpGrowFwhmScaling: 10.
fpGrowMin: 30
fpGrowMax: 62

kernelRadiusFwhmScaling: 2.5
kernelRadiusMin: 7
kernelRadiusMax: 15

alardSigFwhmScaling: 0.25 0.50 1.00


######
# Regularization used with delta-function kernel basis set to enfore
# smoothness and self-similarity
#
# order      : Which derivative you expect to be smooth (e.g. for order=0, first derivative is penalized)
# boundary   : 0 = unwrapped, 1 = wrapped, 2 = order-tapered ('order' is highest used) 
# difference : 0 = forward, 1 = central
# scaling    : Fraction of the default lambda calculation (N.R. 18.5.8) to use; strength of regularization
#
useRegularization: true
regularizationOrder: 2
regularizationBoundary: 1
regularizationDifference: 0
regularizationScaling: 0.0001



####################################
# KERNEL QUALITY CONTROL
#
######
# Rejects objects with deviant Kernel Sums
#
#
maxKsumIterations: 5
maxKsumSigma: 3.0

######
# Rejects objects with bad difference image quality
#
# This is used as a proxy for the quality of the kernel.  We look at
# both the mean value of the residuals in the difference image
# (normalized by the noise; expectation value is 0.0) as well as the
# width of the distribution (expectation value 1.0)
#
# Maximum diffim average of (residual/noise) for an acceptable Kernel
#
candidateResidualMeanMax: 0.25

######
# Maximum diffim standard deviation of (residual/noise) for an acceptable Kernel
#
candidateResidualStdMax: 1.25

######
# What types of sigma clipping to enable
#
# If you want sigma clipping at each step along the way, it should be:
#   singleKernelClipping:  true
#   kernelSumClipping:     true
#   spatialKernelClipping: true
#
# If you only care about the final spatial kernel quality it should be:
#   singleKernelClipping:  false
#   kernelSumClipping:     false
#   spatialKernelClipping: true
# In this case you might want to consider upping "maxSpatialIterations" below
#
singleKernelClipping:  true
kernelSumClipping:     true
spatialKernelClipping: true



####################################
# SINGLE KERNEL FITTING AROUND 1 SOURCE
#
######
# Remake single kernel using better variance estimate after first pass?
#
# Primarily useful when convolving a single-depth template image,
# otherwise not necessary
#
iterateSingleKernel: false

######
# Use constant variance weighting in single kernel fitting?  
#
# In some cases this is better for bright star residuals
#
constantVarianceWeighting: false

######
# Calculate kernel and background uncertainties for each object?
#
# Comes from inverse of the covariance matrix
# NOTE: Regularization can cause this step problems
#
calculateKernelUncertainty: false



####################################
# SPATIAL KERNEL FITTING
#
######
# Order of kernel and background spatial variation
#
# If you are using a large image, spatialKernelOrder=0, and a constant
# kernel is a bad approximation, you probably want to use the
# following configuration for the sigma clipping above:
#
#   singleKernelClipping:  true
#   kernelSumClipping:     true
#   spatialKernelClipping: false
# 
spatialKernelOrder: 1
spatialBgOrder:     1

######
# Control for background subtraction
# 
# algorithm = how to interpolate the background values
# binsize = how large regions of the sky should be used for each background point
# undersample = what do do if there are not enough regions for the interpolation
#
backgroundPolicy: {
    algorithm:  "NATURAL_SPLINE" 
    binsize:    512
    undersample: "REDUCE_INTERP_ORDER"
}

######
# Control if we use afwMath.BackgroundControl to subtract off its own
# determination of the background or not
# 
useAfwBackground: false

#####
# Chops up the image into cells of sizeCellX x sizeCellY pixels
#
# Used to initialize afwMath::SpatialCellSet class 
#
sizeCellX: 256
sizeCellY: 256

######
# Number of stars to use in each SpatialCell cell
#
nStarPerCell: 1

######
# Number of iterations to reject bad footprints in the spatial fitting
#
maxSpatialIterations: 5

######
# Do we use PCA to reduce the dimensionality of the basis sets?
#
# This is particularly useful for delta-function kernels;
# functionally, all the Cells have their raw kernels determined, we
# run a PCA on these Kernels, and then re-fit the Cells using the
# eigenKernels which are then fit for spatially using the same
# technique as for the non-PCA delta-function and Alard-Lupton kernels
# 
# If this option is used, the first term (mean kernel) will have no
# spatial variation and the kernel sum will be conserved
#
usePcaForSpatialKernel: true

######
# How many principal components do you use in the decomposition?
#
# Note : this is defined to be the number to use *_in addition to_*
# the mean kernel, so in total you use N+1 basis functions for the
# decomposition.
# 
numPrincipalComponents: 4

######
# At what fraction of the eigenvalues do you cut off the expansion?
#
# This is currently not implemented
#
fracEigenVal : 0.95
